{"version":3,"sources":["webpack:///./node_modules/@magento/peregrine/lib/hooks/useCustomerWishlistSkus/customerWishlist.gql.ce.js","webpack:///./node_modules/@magento/peregrine/lib/hooks/useCustomerWishlistSkus/customerWishlist.gql.ee.js","webpack:///./node_modules/@magento/peregrine/lib/hooks/useCustomerWishlistSkus/useCustomerWishlistSkus.js","webpack:///./node_modules/@magento/peregrine/lib/talons/Gallery/gallery.gql.ce.js","webpack:///./node_modules/@magento/peregrine/lib/talons/Gallery/useGallery.js","webpack:///./node_modules/@magento/peregrine/lib/talons/Gallery/useGalleryItem.js","webpack:///./node_modules/@magento/venia-ui/lib/components/Portal/portal.js","webpack:///./node_modules/@magento/venia-ui/lib/util/formValidators.js"],"names":["GET_WISHLIST_ITEMS","gql","getProductsInWishlistsQuery","GET_PRODUCTS_IN_WISHLISTS","getWishlistItemsQuery","useCustomerWishlistSkus","props","operations","mergeOperations","defaultOperations","isSignedIn","useUserContext","currentPage","setCurrentPage","useState","client","data","customerWishlistProducts","useQuery","fetchPolicy","onCompleted","itemsToAdd","Set","wishlists","customer","shouldFetchMore","map","wishlist","items","items_v2","item","sku","product","includes","add","pageInfo","page_info","total_pages","current_page","size","writeQuery","query","current","skip","variables","GET_WISHLIST_CONFIG","getWishlistConfigQuery","useGallery","wishlistConfigData","storeConfig","useGalleryItem","wishlistButtonProps","magento_wishlist_general_is_enabled","quantity","Portal","children","container","isServer","globalThis","document","target","useMemo","HTMLElement","getElementById","createPortal","propTypes","node","object","SUCCESS","undefined","hasLengthAtLeast","value","values","minimumLength","message","id","defaultMessage","length","hasLengthAtMost","maximumLength","hasLengthExactly","isRequired","FAILURE","stringValue","String","trim","measureResult","mustBeChecked","validateRegionCode","countries","countryCode","DEFAULT_COUNTRY_CODE","country","find","invalidCountry","available_regions","regions","Array","isArray","invalidRegions","region","code","invalidAbbrev","validatePassword","count","lower","upper","digit","special","char","test","Object","filter","Boolean","isEqualToField","fieldKey","isNotEqualToField"],"mappings":"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","file":"vendors~RootCmp_CATEGORY__default~RootCmp_PRODUCT__default.9be5a8c5dbd1fee231d5.js","sourcesContent":["import { gql } from '@apollo/client';\n\nimport { GET_PRODUCTS_IN_WISHLISTS } from '@magento/peregrine/lib/talons/Wishlist/AddToListButton/addToListButton.gql';\n\nexport const GET_WISHLIST_ITEMS = gql`\n    query GetWishlistItemsForLocalField($currentPage: Int!) {\n        customer {\n            id\n            wishlists {\n                id\n                items_v2(currentPage: $currentPage, pageSize: 10) {\n                    items {\n                        id\n                        product {\n                            id\n                            sku\n                        }\n                    }\n                    page_info {\n                        current_page\n                        total_pages\n                    }\n                }\n            }\n        }\n    }\n`;\n\nexport default {\n    getProductsInWishlistsQuery: GET_PRODUCTS_IN_WISHLISTS,\n    getWishlistItemsQuery: GET_WISHLIST_ITEMS\n};\n","import { GET_PRODUCTS_IN_WISHLISTS } from '@magento/peregrine/lib/talons/Wishlist/AddToListButton/addToListButton.gql';\nimport { GET_WISHLIST_ITEMS } from './customerWishlist.gql.ce';\n\nexport default {\n    getProductsInWishlistsQuery: GET_PRODUCTS_IN_WISHLISTS,\n    getWishlistItemsQuery: GET_WISHLIST_ITEMS\n};\n","import { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { useUserContext } from '../../context/user';\nimport mergeOperations from '../../util/shallowMerge';\n\nimport defaultOperations from './customerWishlist.gql.ee';\n\n/**\n * A hook that queries for products in a customer's wishlists and maintains a\n * list of skus in a local cache entry.\n *\n * @param {DocumentNode} props.operations operations used to prepare the local customer wishlist array\n * @returns {undefined}\n */\nexport const useCustomerWishlistSkus = (props = {}) => {\n    const operations = mergeOperations(defaultOperations, props.operations);\n    const [{ isSignedIn }] = useUserContext();\n\n    const [currentPage, setCurrentPage] = useState(1);\n\n    const {\n        client,\n        data: { customerWishlistProducts }\n    } = useQuery(operations.getProductsInWishlistsQuery);\n\n    useQuery(operations.getWishlistItemsQuery, {\n        fetchPolicy: 'cache-and-network',\n        onCompleted: data => {\n            const itemsToAdd = new Set();\n            const wishlists = data.customer.wishlists;\n            let shouldFetchMore = false;\n            wishlists.map(wishlist => {\n                const items = wishlist.items_v2.items;\n                items.map(item => {\n                    const sku = item.product.sku;\n                    if (!customerWishlistProducts.includes(sku)) {\n                        itemsToAdd.add(sku);\n                    }\n                });\n\n                const pageInfo = wishlist.items_v2.page_info;\n\n                if (pageInfo.total_pages > pageInfo.current_page) {\n                    shouldFetchMore = true;\n                }\n            });\n\n            if (itemsToAdd.size) {\n                client.writeQuery({\n                    query: operations.getProductsInWishlistsQuery,\n                    data: {\n                        customerWishlistProducts: [\n                            ...customerWishlistProducts,\n                            ...itemsToAdd\n                        ]\n                    }\n                });\n            }\n\n            if (shouldFetchMore) {\n                setCurrentPage(current => ++current);\n            }\n        },\n        skip: !isSignedIn,\n        variables: {\n            currentPage\n        }\n    });\n};\n","import { gql } from '@apollo/client';\n\nexport const GET_WISHLIST_CONFIG = gql`\n    query GetWishlistConfigForGalleryCE {\n        storeConfig {\n            id\n            magento_wishlist_general_is_enabled\n        }\n    }\n`;\n\nexport default {\n    getWishlistConfigQuery: GET_WISHLIST_CONFIG\n};\n","import { useQuery } from '@apollo/client';\n\nimport { useCustomerWishlistSkus } from '../../hooks/useCustomerWishlistSkus/useCustomerWishlistSkus';\n\nimport mergeOperations from '../../util/shallowMerge';\nimport defaultOperations from './gallery.gql';\n\nexport const useGallery = (props = {}) => {\n    const operations = mergeOperations(defaultOperations, props.operations);\n\n    useCustomerWishlistSkus();\n\n    const { data: wishlistConfigData } = useQuery(\n        operations.getWishlistConfigQuery,\n        { fetchPolicy: 'cache-and-network' }\n    );\n\n    const storeConfig = wishlistConfigData\n        ? wishlistConfigData.storeConfig\n        : null;\n\n    return {\n        storeConfig\n    };\n};\n","export const useGalleryItem = (props = {}) => {\n    const { item, storeConfig } = props;\n\n    const wishlistButtonProps =\n        storeConfig && storeConfig.magento_wishlist_general_is_enabled === '1'\n            ? {\n                  item: {\n                      sku: item.sku,\n                      quantity: 1\n                  },\n                  storeConfig\n              }\n            : null;\n\n    return { ...props, wishlistButtonProps };\n};\n","import { useMemo } from 'react';\nimport { createPortal } from 'react-dom';\nimport { node, object } from 'prop-types';\n\n/**\n * A component that renders content into a DOM node that exists\n * outside of the DOM hierarchy of the parent component.\n * @see https://reactjs.org/docs/portals.html\n *\n * @typedef Portal\n * @kind functional component\n *\n * @param {ReactNodeLike}   children  - React child elements\n * @param {Object}          container - The DOM node to render the children in\n *\n * @returns {React.ReactPortal} The React portal.\n */\nconst Portal = ({ children, container }) => {\n    const isServer = !globalThis.document;\n\n    // a component must always call the same hooks, so no early returns\n    const target = useMemo(() => {\n        return isServer\n            ? null\n            : container instanceof HTMLElement\n            ? container\n            : document.getElementById('root');\n    }, [container, isServer]);\n\n    // TODO: replace direct usage of Portal with something SSR-compatible\n    return isServer ? null : createPortal(children, target);\n};\n\nexport default Portal;\n\n/**\n * Props for {@link Portal}\n *\n * @typedef props\n *\n * @property {ReactNodeLike} children any elements that will be child\n * elements inside the modal.\n * @property {Object} container the container element (a DOM element)\n * where the children will be rendered.\n */\nPortal.propTypes = {\n    children: node,\n    container: object\n};\n","/**\n * @fileoverview This file houses functions that can be used for\n * validation of form fields.\n *\n * Note that these functions should return a string error message\n * when they fail, and `undefined` when they pass.\n */\n\nconst SUCCESS = undefined;\n\nexport const hasLengthAtLeast = (value, values, minimumLength) => {\n    const message = {\n        id: 'validation.hasLengthAtLeast',\n        defaultMessage: 'Must contain more characters',\n        value: minimumLength\n    };\n    if (!value || value.length < minimumLength) {\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthAtMost = (value, values, maximumLength) => {\n    if (value && value.length > maximumLength) {\n        const message = {\n            id: 'validation.hasLengthAtMost',\n            defaultMessage: 'Must have less characters',\n            value: maximumLength\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthExactly = (value, values, length) => {\n    if (value && value.length !== length) {\n        const message = {\n            id: 'validation.hasLengthExactly',\n            defaultMessage: 'Does not have exact number of characters',\n            value: length\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\n/**\n * isRequired is provided here for convenience but it is inherently ambiguous and therefore we don't recommend using it.\n * Consider using more specific validators such as `hasLengthAtLeast` or `mustBeChecked`.\n */\nexport const isRequired = value => {\n    const FAILURE = {\n        id: 'validation.isRequired',\n        defaultMessage: 'Is required.'\n    };\n\n    // The field must have a value (no null or undefined) and\n    // if it's a boolean, it must be `true`.\n    if (!value) return FAILURE;\n\n    // If it is a number or string, it must have at least one character of input (after trim).\n    const stringValue = String(value).trim();\n    const measureResult = hasLengthAtLeast(stringValue, null, 1);\n\n    if (measureResult) return FAILURE;\n    return SUCCESS;\n};\n\nexport const mustBeChecked = value => {\n    const message = {\n        id: 'validation.mustBeChecked',\n        defaultMessage: 'Must be checked.'\n    };\n    if (!value) return message;\n\n    return SUCCESS;\n};\n\nexport const validateRegionCode = (value, values, countries) => {\n    const countryCode = DEFAULT_COUNTRY_CODE;\n    const country = countries.find(({ id }) => id === countryCode);\n\n    if (!country) {\n        const invalidCountry = {\n            id: 'validation.invalidCountry',\n            defaultMessage: `Country \"${countryCode}\" is not an available country.`,\n            value: countryCode\n        };\n        return invalidCountry;\n    }\n    const { available_regions: regions } = country;\n\n    if (!(Array.isArray(regions) && regions.length)) {\n        const invalidRegions = {\n            id: 'validation.invalidRegions',\n            defaultMessage: `Country \"${countryCode}\" does not contain any available regions.`,\n            value: countryCode\n        };\n        return invalidRegions;\n    }\n\n    const region = regions.find(({ code }) => code === value);\n    if (!region) {\n        const invalidAbbrev = {\n            id: 'validation.invalidAbbreviation',\n            defaultMessage: 'That is not a valid state abbreviation.',\n            value: value\n        };\n        return invalidAbbrev;\n    }\n\n    return SUCCESS;\n};\n\nexport const validatePassword = value => {\n    const count = {\n        lower: 0,\n        upper: 0,\n        digit: 0,\n        special: 0\n    };\n\n    for (const char of value) {\n        if (/[a-z]/.test(char)) count.lower++;\n        else if (/[A-Z]/.test(char)) count.upper++;\n        else if (/\\d/.test(char)) count.digit++;\n        else if (/\\S/.test(char)) count.special++;\n    }\n\n    if (Object.values(count).filter(Boolean).length < 3) {\n        const message = {\n            id: 'validation.validatePassword',\n            defaultMessage:\n                'A password must contain at least 3 of the following: lowercase, uppercase, digits, special characters.'\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const isEqualToField = (value, values, fieldKey) => {\n    const message = {\n        id: 'validation.isEqualToField',\n        defaultMessage: 'Fields must match',\n        value: fieldKey\n    };\n    return value === values[fieldKey] ? SUCCESS : message;\n};\n\nexport const isNotEqualToField = (value, values, fieldKey) => {\n    const message = {\n        id: 'validation.isNotEqualToField',\n        defaultMessage: 'Fields must be different',\n        value: fieldKey\n    };\n    return value !== values[fieldKey] ? SUCCESS : message;\n};\n"],"sourceRoot":""}