{"version":3,"sources":["webpack:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceSummary/discountSummary.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceSummary/queries/giftCardSummary.ce.js","webpack:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceSummary/shippingSummary.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceSummary/taxSummary.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/CartPage/PriceSummary/priceSummaryFragments.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/ForgotPassword/useForgotPassword.js","webpack:///./node_modules/@magento/peregrine/lib/talons/SignIn/signIn.gql.js","webpack:///./node_modules/@magento/peregrine/lib/talons/SignIn/useSignIn.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CartPage/PriceAdjustments/CouponCode/couponCodeFragments.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CartPage/ProductListing/productListingFragments.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CartPage/GiftCards/giftCardFragments.js","webpack:///./node_modules/@magento/venia-ui/lib/components/CartPage/cartPageFragments.gql.js"],"names":["DiscountSummaryFragment","gql","GiftCardSummaryFragment","ShippingSummaryFragment","TaxSummaryFragment","GrandTotalFragment","PriceSummaryFragment","useForgotPassword","props","onCancel","mutations","hasCompleted","setCompleted","useState","forgotPasswordEmail","setForgotPasswordEmail","requestResetEmail","error","requestResetEmailError","loading","isResettingPassword","useMutation","requestPasswordResetEmailMutation","handleFormSubmit","useCallback","email","variables","err","handleCancel","formErrors","GET_CUSTOMER","SIGN_IN","CREATE_CART","MERGE_CARTS","createCartMutation","getCustomerQuery","mergeCartsMutation","signInMutation","useSignIn","getCartDetailsQuery","setDefaultUsername","showCreateAccount","showForgotPassword","operations","mergeOperations","DEFAULT_OPERATIONS","apolloClient","useApolloClient","isSigningIn","setIsSigningIn","cartId","createCart","removeCart","getCartDetails","useCartContext","isGettingDetails","getDetailsError","getUserDetails","setToken","useUserContext","signIn","signInError","fetchPolicy","fetchCartId","mergeCarts","fetchUserDetails","useAwaitQuery","fetchCartDetails","formApiRef","useRef","setFormApi","api","current","handleSubmit","password","sourceCartId","signInResponse","token","data","generateCustomerToken","clearCartDataFromCache","clearCustomerDataFromCache","destinationCartId","retrieveCartId","process","console","handleForgotPassword","formApi","getValue","handleCreateAccount","errors","useMemo","Map","isBusy","AppliedCouponsFragment","ProductListingFragment","GiftCardFragment","CartPageFragment"],"mappings":"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","file":"10.36c1fb7035cc77f0bf3b.js","sourcesContent":["import { gql } from '@apollo/client';\n\nexport const DiscountSummaryFragment = gql`\n    fragment DiscountSummaryFragment on CartPrices {\n        discounts {\n            amount {\n                currency\n                value\n            }\n            label\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GiftCardSummaryFragment = gql`\n    fragment GiftCardSummaryFragment on Cart {\n        id\n        __typename\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const ShippingSummaryFragment = gql`\n    fragment ShippingSummaryFragment on Cart {\n        id\n        shipping_addresses {\n            selected_shipping_method {\n                amount {\n                    currency\n                    value\n                }\n            }\n            street\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const TaxSummaryFragment = gql`\n    fragment TaxSummaryFragment on CartPrices {\n        applied_taxes {\n            amount {\n                currency\n                value\n            }\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nimport { DiscountSummaryFragment } from './discountSummary.gql';\nimport { GiftCardSummaryFragment } from './queries/giftCardSummary';\nimport { ShippingSummaryFragment } from './shippingSummary.gql';\nimport { TaxSummaryFragment } from './taxSummary.gql';\n\nexport const GrandTotalFragment = gql`\n    fragment GrandTotalFragment on CartPrices {\n        grand_total {\n            currency\n            value\n        }\n    }\n`;\n\nexport const PriceSummaryFragment = gql`\n    fragment PriceSummaryFragment on Cart {\n        id\n        items {\n            id\n            quantity\n        }\n        ...ShippingSummaryFragment\n        prices {\n            ...TaxSummaryFragment\n            ...DiscountSummaryFragment\n            ...GrandTotalFragment\n            subtotal_excluding_tax {\n                currency\n                value\n            }\n        }\n        ...GiftCardSummaryFragment\n    }\n    ${DiscountSummaryFragment}\n    ${GiftCardSummaryFragment}\n    ${GrandTotalFragment}\n    ${ShippingSummaryFragment}\n    ${TaxSummaryFragment}\n`;\n","import { useCallback, useState } from 'react';\nimport { useMutation } from '@apollo/client';\n\n/**\n * Returns props necessary to render a ForgotPassword form.\n *\n * @function\n *\n * @param {Function} props.onCancel - callback function to call when user clicks the cancel button\n * @param {RequestPasswordEmailMutations} props.mutations - GraphQL mutations for the forgot password form.\n *\n * @returns {ForgotPasswordProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { useForgotPassword } from '@magento/peregrine/lib/talons/ForgotPassword/useForgotPassword.js';\n */\nexport const useForgotPassword = props => {\n    const { onCancel, mutations } = props;\n\n    const [hasCompleted, setCompleted] = useState(false);\n    const [forgotPasswordEmail, setForgotPasswordEmail] = useState(null);\n\n    const [\n        requestResetEmail,\n        { error: requestResetEmailError, loading: isResettingPassword }\n    ] = useMutation(mutations.requestPasswordResetEmailMutation);\n\n    const handleFormSubmit = useCallback(\n        async ({ email }) => {\n            try {\n                await requestResetEmail({ variables: { email } });\n                setForgotPasswordEmail(email);\n                setCompleted(true);\n            } catch (err) {\n                setCompleted(false);\n            }\n        },\n        [requestResetEmail]\n    );\n\n    const handleCancel = useCallback(() => {\n        onCancel();\n    }, [onCancel]);\n\n    return {\n        forgotPasswordEmail,\n        formErrors: [requestResetEmailError],\n        handleCancel,\n        handleFormSubmit,\n        hasCompleted,\n        isResettingPassword\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * GraphQL mutations for the forgot password form.\n * This is a type used by the {@link useForgotPassword} talon.\n *\n * @typedef {Object} RequestPasswordEmailMutations\n *\n * @property {GraphQLAST} requestPasswordResetEmailMutation mutation for requesting password reset email\n *\n * @see [forgotPassword.gql.js]{@link https://github.com/magento/pwa-studio/blob/develop/packages/venia-ui/lib/components/ForgotPassword/forgotPassword.gql.js}\n * for the query used in Venia\n */\n\n/**\n * Object type returned by the {@link useForgotPassword} talon.\n * It provides props data to use when rendering the forgot password form component.\n *\n * @typedef {Object} ForgotPasswordProps\n *\n * @property {String} forgotPasswordEmail email address of the user whose password reset has been requested\n * @property {Array} formErrors A list of form errors\n * @property {Function} handleCancel Callback function to handle form cancellations\n * @property {Function} handleFormSubmit Callback function to handle form submission\n * @property {Boolean} hasCompleted True if password reset mutation has completed. False otherwise\n * @property {Boolean} isResettingPassword True if password reset mutation is in progress. False otherwise\n */\n","import { gql } from '@apollo/client';\n\nexport const GET_CUSTOMER = gql`\n    query GetCustomerAfterSignIn {\n        customer {\n            id\n            email\n            firstname\n            lastname\n            is_subscribed\n        }\n    }\n`;\n\nexport const SIGN_IN = gql`\n    mutation SignIn($email: String!, $password: String!) {\n        generateCustomerToken(email: $email, password: $password) {\n            token\n        }\n    }\n`;\n\nexport const CREATE_CART = gql`\n    mutation CreateCartAfterSignIn {\n        cartId: createEmptyCart\n    }\n`;\n\nexport const MERGE_CARTS = gql`\n    mutation MergeCartsAfterSignIn(\n        $sourceCartId: String!\n        $destinationCartId: String!\n    ) {\n        mergeCarts(\n            source_cart_id: $sourceCartId\n            destination_cart_id: $destinationCartId\n        ) @connection(key: \"mergeCarts\") {\n            id\n            items {\n                id\n            }\n        }\n    }\n`;\n\nexport default {\n    createCartMutation: CREATE_CART,\n    getCustomerQuery: GET_CUSTOMER,\n    mergeCartsMutation: MERGE_CARTS,\n    signInMutation: SIGN_IN\n};\n","import { useCallback, useRef, useState, useMemo } from 'react';\nimport { useApolloClient, useMutation } from '@apollo/client';\n\nimport { clearCartDataFromCache } from '../../Apollo/clearCartDataFromCache';\nimport { clearCustomerDataFromCache } from '../../Apollo/clearCustomerDataFromCache';\nimport mergeOperations from '../../util/shallowMerge';\nimport { useCartContext } from '../../context/cart';\nimport { useUserContext } from '../../context/user';\nimport { useAwaitQuery } from '../../hooks/useAwaitQuery';\nimport { retrieveCartId } from '../../store/actions/cart';\n\nimport DEFAULT_OPERATIONS from './signIn.gql';\n\nexport const useSignIn = props => {\n    const {\n        getCartDetailsQuery,\n        setDefaultUsername,\n        showCreateAccount,\n        showForgotPassword\n    } = props;\n\n    const operations = mergeOperations(DEFAULT_OPERATIONS, props.operations);\n    const {\n        createCartMutation,\n        getCustomerQuery,\n        mergeCartsMutation,\n        signInMutation\n    } = operations;\n\n    const apolloClient = useApolloClient();\n    const [isSigningIn, setIsSigningIn] = useState(false);\n\n    const [\n        { cartId },\n        { createCart, removeCart, getCartDetails }\n    ] = useCartContext();\n\n    const [\n        { isGettingDetails, getDetailsError },\n        { getUserDetails, setToken }\n    ] = useUserContext();\n\n    const [signIn, { error: signInError }] = useMutation(signInMutation, {\n        fetchPolicy: 'no-cache'\n    });\n\n    const [fetchCartId] = useMutation(createCartMutation);\n    const [mergeCarts] = useMutation(mergeCartsMutation);\n    const fetchUserDetails = useAwaitQuery(getCustomerQuery);\n    const fetchCartDetails = useAwaitQuery(getCartDetailsQuery);\n\n    const formApiRef = useRef(null);\n    const setFormApi = useCallback(api => (formApiRef.current = api), []);\n\n    const handleSubmit = useCallback(\n        async ({ email, password }) => {\n            setIsSigningIn(true);\n            try {\n                // Get source cart id (guest cart id).\n                const sourceCartId = cartId;\n\n                // Sign in and set the token.\n                const signInResponse = await signIn({\n                    variables: { email, password }\n                });\n                const token = signInResponse.data.generateCustomerToken.token;\n                await setToken(token);\n\n                // Clear all cart/customer data from cache and redux.\n                await clearCartDataFromCache(apolloClient);\n                await clearCustomerDataFromCache(apolloClient);\n                await removeCart();\n\n                // Create and get the customer's cart id.\n                await createCart({\n                    fetchCartId\n                });\n                const destinationCartId = await retrieveCartId();\n\n                // Merge the guest cart into the customer cart.\n                await mergeCarts({\n                    variables: {\n                        destinationCartId,\n                        sourceCartId\n                    }\n                });\n\n                // Ensure old stores are updated with any new data.\n                getUserDetails({ fetchUserDetails });\n                getCartDetails({ fetchCartId, fetchCartDetails });\n            } catch (error) {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n\n                setIsSigningIn(false);\n            }\n        },\n        [\n            cartId,\n            apolloClient,\n            removeCart,\n            signIn,\n            setToken,\n            createCart,\n            fetchCartId,\n            mergeCarts,\n            getUserDetails,\n            fetchUserDetails,\n            getCartDetails,\n            fetchCartDetails\n        ]\n    );\n\n    const handleForgotPassword = useCallback(() => {\n        const { current: formApi } = formApiRef;\n\n        if (formApi) {\n            setDefaultUsername(formApi.getValue('email'));\n        }\n\n        showForgotPassword();\n    }, [setDefaultUsername, showForgotPassword]);\n\n    const handleCreateAccount = useCallback(() => {\n        const { current: formApi } = formApiRef;\n\n        if (formApi) {\n            setDefaultUsername(formApi.getValue('email'));\n        }\n\n        showCreateAccount();\n    }, [setDefaultUsername, showCreateAccount]);\n\n    const errors = useMemo(\n        () =>\n            new Map([\n                ['getUserDetailsQuery', getDetailsError],\n                ['signInMutation', signInError]\n            ]),\n        [getDetailsError, signInError]\n    );\n\n    return {\n        errors,\n        handleCreateAccount,\n        handleForgotPassword,\n        handleSubmit,\n        isBusy: isGettingDetails || isSigningIn,\n        setFormApi\n    };\n};\n","import { gql } from '@apollo/client';\n\nexport const AppliedCouponsFragment = gql`\n    fragment AppliedCouponsFragment on Cart {\n        id\n        applied_coupons {\n            code\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const ProductListingFragment = gql`\n    fragment ProductListingFragment on Cart {\n        id\n        items {\n            id\n            product {\n                id\n                name\n                sku\n                url_key\n                url_suffix\n                thumbnail {\n                    url\n                }\n                small_image {\n                    url\n                }\n                stock_status\n                ... on ConfigurableProduct {\n                    variants {\n                        attributes {\n                            uid\n                        }\n                        product {\n                            id\n                            small_image {\n                                url\n                            }\n                        }\n                    }\n                }\n            }\n            prices {\n                price {\n                    currency\n                    value\n                }\n            }\n            quantity\n            ... on ConfigurableCartItem {\n                configurable_options {\n                    id\n                    configurable_product_option_value_uid\n                    option_label\n                    value_id\n                    value_label\n                }\n            }\n        }\n    }\n`;\n","import { gql } from '@apollo/client';\n\nexport const GiftCardFragment = gql`\n    fragment GiftCardFragment on Cart {\n        __typename\n        id\n    }\n`;\n","import { gql } from '@apollo/client';\n\nimport { GiftCardFragment } from './GiftCards/giftCardFragments';\nimport { ProductListingFragment } from './ProductListing/productListingFragments';\nimport { PriceSummaryFragment } from '@magento/peregrine/lib/talons/CartPage/PriceSummary/priceSummaryFragments.gql';\nimport { AppliedCouponsFragment } from './PriceAdjustments/CouponCode/couponCodeFragments';\n\nexport const CartPageFragment = gql`\n    fragment CartPageFragment on Cart {\n        id\n        total_quantity\n        ...AppliedCouponsFragment\n        ...GiftCardFragment\n        ...ProductListingFragment\n        ...PriceSummaryFragment\n    }\n    ${AppliedCouponsFragment}\n    ${GiftCardFragment}\n    ${ProductListingFragment}\n    ${PriceSummaryFragment}\n`;\n"],"sourceRoot":""}