{"version":3,"sources":["webpack:///./node_modules/@magento/peregrine/lib/hooks/useScrollIntoView.js","webpack:///./node_modules/@magento/peregrine/lib/talons/FormError/useFormError.js","webpack:///./node_modules/@magento/peregrine/lib/talons/Password/usePassword.js","webpack:///./node_modules/@magento/peregrine/lib/util/deriveErrorMessage.js","webpack:///./node_modules/@magento/venia-ui/lib/util/combineValidators.js","webpack:///./node_modules/@magento/venia-ui/lib/util/formValidators.js"],"names":["OPTIONS_DEFAULTS","behavior","block","useScrollIntoView","ref","shouldScroll","options","useEffect","current","HTMLElement","scrollIntoView","useFormError","props","errors","derivedErrorMessage","useMemo","deriveErrorMessage","errorMessage","usePassword","visible","setVisbility","useState","togglePasswordVisibility","useCallback","handleBlur","toString","error","graphQLErrors","message","length","map","join","errorCollection","push","callbacks","Array","isArray","Error","value","values","result","i","callback","extendedCallback","extendedParam","SUCCESS","undefined","hasLengthAtLeast","minimumLength","id","defaultMessage","hasLengthAtMost","maximumLength","hasLengthExactly","isRequired","FAILURE","stringValue","String","trim","measureResult","mustBeChecked","validateRegionCode","countries","countryCode","DEFAULT_COUNTRY_CODE","country","find","invalidCountry","available_regions","regions","invalidRegions","region","code","invalidAbbrev","validatePassword","count","lower","upper","digit","special","char","test","Object","filter","Boolean","isEqualToField","fieldKey","isNotEqualToField"],"mappings":"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","file":"1.45accd1b103d903840ac.js","sourcesContent":["import { useEffect } from 'react';\n\nconst OPTIONS_DEFAULTS = { behavior: 'smooth', block: 'center' };\n\n/**\n * Scrolls a ref into view on truthiness of a thing.\n *\n * @param {React.Ref} ref\n * @param {Boolean} shouldScroll allows scrolling if truthy\n * @param {OPTIONS_DEFAULTS} options https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\n */\nexport const useScrollIntoView = (\n    ref,\n    shouldScroll,\n    options = OPTIONS_DEFAULTS\n) => {\n    useEffect(() => {\n        if (ref.current && ref.current instanceof HTMLElement && shouldScroll) {\n            ref.current.scrollIntoView(options);\n        }\n    }, [options, ref, shouldScroll]);\n};\n","import { useMemo } from 'react';\nimport { deriveErrorMessage } from '../../util/deriveErrorMessage';\n\nexport const useFormError = props => {\n    const { errors } = props;\n\n    const derivedErrorMessage = useMemo(() => deriveErrorMessage(errors), [\n        errors\n    ]);\n\n    return {\n        errorMessage: derivedErrorMessage\n    };\n};\n","import { useCallback, useState } from 'react';\n\n/**\n * Returns props necessary to render a Password component.\n *\n * @returns {PasswordProps}\n *\n * @example <caption>Importing into your project</caption>\n * import { usePassword } from '@magento/peregrine/lib/talons/Password/usePassword.js';\n */\nexport const usePassword = () => {\n    const [visible, setVisbility] = useState(false);\n\n    const togglePasswordVisibility = useCallback(() => {\n        setVisbility(!visible);\n\n        // TODO: Clicking the \"toggle visibility\" button does not focus the\n        // input, which means `onBlur` will not be called. To work around this\n        // we would need to somehow focus the input after this toggle, but that\n        // probably requires passing a ref down to informed.\n    }, [visible]);\n\n    const handleBlur = useCallback(() => {\n        setVisbility(false);\n    }, []);\n\n    return {\n        handleBlur,\n        togglePasswordVisibility,\n        visible\n    };\n};\n\n/** JSDocs type definitions */\n\n/**\n * Object type returned by the {@link usePassword} talon.\n * It provides props data to use when rendering the password component.\n *\n * @typedef {Object} PasswordProps\n *\n * @property {Function} handleBlur Callback to invoke when field is blurred\n * @property {Function} togglePasswordVisibility Callback function to toggle password visibility\n * @property {Boolean} visible If true password should be visible. Hidden if false.\n */\n","/**\n * Maps an error to a string message\n *\n * @param {Error} error the error to map\n * @return {String} error message\n */\nconst toString = error => {\n    const { graphQLErrors, message } = error;\n\n    return graphQLErrors && graphQLErrors.length\n        ? graphQLErrors.map(({ message }) => message).join(', ')\n        : message;\n};\n\n/**\n * A function to derive an error string from an array of errors.\n */\nexport const deriveErrorMessage = errors => {\n    const errorCollection = [];\n    for (const error of errors) {\n        if (error) {\n            errorCollection.push(toString(error));\n        }\n    }\n\n    return errorCollection.join(', ');\n};\n","/**\n * The function purpose is to group validation callbacks into a chain within single callback function.\n *\n * The single callback function should be passed as `validation` prop to an input component. It's being\n * called by the React Controller on a form submit.\n * The `callbacks` param is the array contains validators. Each validator should be either function or array. In case of a\n * validator is a function it is called the same way as React Controller does, with a field `value` and a form `values` params. If\n * the validator is an array, this means that it is extended validator which requires additional param for configuration.\n * The first index of that array should be a extended validator function, the second index is extended param, which is needed for\n * that function. So the function is called with three params on the form submit, with a field `value`, a form `values`\n * and an `extended param`.\n *\n * Example usage of the function:\n *\n * <input validate={combine([\n * foo\n * ])} .../>\n *\n * foo - validation function\n * It will be called on form submitting within chain as:\n * `foo(value, values)`\n *\n * Example usage of the function with extended callback:\n *\n * <input validate={combine([\n * [foo, bar]\n * ])} .../>\n *\n * foo - extended validator\n * bar - additional param\n * It will be called on form submitting within chain as:\n * `foo(value, values, bar)`\n *\n * Each callback being called one after another, according to their index in callbacks array, if one item returned the error\n * message, validation is failed, and rest validator are not supposed to be called.\n *\n * @param {Array} callbacks\n * @return {function(value, values): *}\n */\nexport default callbacks => {\n    if (callbacks == null || !Array.isArray(callbacks)) {\n        throw new Error('Expected `callbacks` to be array.');\n    }\n\n    return (value, values) => {\n        let result = null;\n\n        for (let i = 0; i < callbacks.length; i++) {\n            const callback = callbacks[i];\n\n            if (\n                callback == null ||\n                (!Array.isArray(callback) && typeof callback !== 'function')\n            ) {\n                throw new Error(\n                    'Expected `callbacks[' + i + ']` to be array or function.'\n                );\n            }\n\n            if (Array.isArray(callback)) {\n                const [extendedCallback, extendedParam] = callback;\n\n                if (typeof extendedCallback !== 'function') {\n                    throw new Error(\n                        'Expected `callbacks[' + i + '][0]` to be function.'\n                    );\n                }\n\n                result = extendedCallback(value, values, extendedParam);\n            } else {\n                result = callback(value, values);\n            }\n\n            if (result) {\n                break;\n            }\n        }\n\n        return result;\n    };\n};\n","/**\n * @fileoverview This file houses functions that can be used for\n * validation of form fields.\n *\n * Note that these functions should return a string error message\n * when they fail, and `undefined` when they pass.\n */\n\nconst SUCCESS = undefined;\n\nexport const hasLengthAtLeast = (value, values, minimumLength) => {\n    const message = {\n        id: 'validation.hasLengthAtLeast',\n        defaultMessage: 'Must contain more characters',\n        value: minimumLength\n    };\n    if (!value || value.length < minimumLength) {\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthAtMost = (value, values, maximumLength) => {\n    if (value && value.length > maximumLength) {\n        const message = {\n            id: 'validation.hasLengthAtMost',\n            defaultMessage: 'Must have less characters',\n            value: maximumLength\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const hasLengthExactly = (value, values, length) => {\n    if (value && value.length !== length) {\n        const message = {\n            id: 'validation.hasLengthExactly',\n            defaultMessage: 'Does not have exact number of characters',\n            value: length\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\n/**\n * isRequired is provided here for convenience but it is inherently ambiguous and therefore we don't recommend using it.\n * Consider using more specific validators such as `hasLengthAtLeast` or `mustBeChecked`.\n */\nexport const isRequired = value => {\n    const FAILURE = {\n        id: 'validation.isRequired',\n        defaultMessage: 'Is required.'\n    };\n\n    // The field must have a value (no null or undefined) and\n    // if it's a boolean, it must be `true`.\n    if (!value) return FAILURE;\n\n    // If it is a number or string, it must have at least one character of input (after trim).\n    const stringValue = String(value).trim();\n    const measureResult = hasLengthAtLeast(stringValue, null, 1);\n\n    if (measureResult) return FAILURE;\n    return SUCCESS;\n};\n\nexport const mustBeChecked = value => {\n    const message = {\n        id: 'validation.mustBeChecked',\n        defaultMessage: 'Must be checked.'\n    };\n    if (!value) return message;\n\n    return SUCCESS;\n};\n\nexport const validateRegionCode = (value, values, countries) => {\n    const countryCode = DEFAULT_COUNTRY_CODE;\n    const country = countries.find(({ id }) => id === countryCode);\n\n    if (!country) {\n        const invalidCountry = {\n            id: 'validation.invalidCountry',\n            defaultMessage: `Country \"${countryCode}\" is not an available country.`,\n            value: countryCode\n        };\n        return invalidCountry;\n    }\n    const { available_regions: regions } = country;\n\n    if (!(Array.isArray(regions) && regions.length)) {\n        const invalidRegions = {\n            id: 'validation.invalidRegions',\n            defaultMessage: `Country \"${countryCode}\" does not contain any available regions.`,\n            value: countryCode\n        };\n        return invalidRegions;\n    }\n\n    const region = regions.find(({ code }) => code === value);\n    if (!region) {\n        const invalidAbbrev = {\n            id: 'validation.invalidAbbreviation',\n            defaultMessage: 'That is not a valid state abbreviation.',\n            value: value\n        };\n        return invalidAbbrev;\n    }\n\n    return SUCCESS;\n};\n\nexport const validatePassword = value => {\n    const count = {\n        lower: 0,\n        upper: 0,\n        digit: 0,\n        special: 0\n    };\n\n    for (const char of value) {\n        if (/[a-z]/.test(char)) count.lower++;\n        else if (/[A-Z]/.test(char)) count.upper++;\n        else if (/\\d/.test(char)) count.digit++;\n        else if (/\\S/.test(char)) count.special++;\n    }\n\n    if (Object.values(count).filter(Boolean).length < 3) {\n        const message = {\n            id: 'validation.validatePassword',\n            defaultMessage:\n                'A password must contain at least 3 of the following: lowercase, uppercase, digits, special characters.'\n        };\n        return message;\n    }\n\n    return SUCCESS;\n};\n\nexport const isEqualToField = (value, values, fieldKey) => {\n    const message = {\n        id: 'validation.isEqualToField',\n        defaultMessage: 'Fields must match',\n        value: fieldKey\n    };\n    return value === values[fieldKey] ? SUCCESS : message;\n};\n\nexport const isNotEqualToField = (value, values, fieldKey) => {\n    const message = {\n        id: 'validation.isNotEqualToField',\n        defaultMessage: 'Fields must be different',\n        value: fieldKey\n    };\n    return value !== values[fieldKey] ? SUCCESS : message;\n};\n"],"sourceRoot":""}